# -*- coding: utf-8 -*-
"""Cópia de WebGIS (FINAL)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EbKF9VN_kD3Bz9yYV7MqrsuqyyTQ5XfO

# WebGis

# Dados

**Dados Utilizados**

1.  Rede Amazônica de Informação Socioambiental Georreferenciada
*   Garimpo Ilegal (2023) https://www.raisg.org/pt-br/mapas/

2.   Fundação Nacional dos Povos Indígenas
*   Terras Indígenas (2024): https://www.gov.br/funai/pt-br/atuacao/terras-indigenas/geoprocessamento-e-mapas

3.   Instituto Brasileiro de Geografia e Estatística
*   Amazônia Legal (2022): https://www.ibge.gov.br/geociencias/cartas-e-mapas/redes-geograficas/15819-amazonia-legal.html
*   Base Cartográfica Contínua - 1:250.000 (2023): https://www.ibge.gov.br/geociencias/downloads-geociencias.html

4. Mapa de Conflitos (FIOCRUZ)
* Casos em tratamento
* https://mapadeconflitos.ensp.fiocruz.br/
* Filtro: Atividade geradora do Conflito -> Mineração, garimpo e siderurgia
* UF: Estados da amazônia legal
"""

from google.colab import drive
drive.mount('/content/drive')

import geopandas as gpd
from google.colab import drive

# Define o caminho para o shapefile
Limites_Amazonia_Legal_2022 = "/content/drive/MyDrive/WebGis/Limites_Amazonia_Legal_2022_shp/Limites_Amazonia_Legal_2022.shp"
MineriaIlegal_ln = "/content/drive/MyDrive/WebGis/MineriaIlegal_2022/MineriaIlegal_ln.shp"
MineriaIlegal_pol = "/content/drive/MyDrive/WebGis/resize/MineriaIlegal_pol_AML.shp"
MineriaIlegal_pt = "/content/drive/MyDrive/WebGis/resize/MineriaIlegal_pt_AML.shp"
tis_poligonaisPolygon = "/content/drive/MyDrive/WebGis/resize/tis_poligonaisPolygon_simplificada.shp"
BR_UF_2024 = "/content/drive/MyDrive/WebGis/bc250_shapefile._2023_11_23/BR_UF_2024.shp"
Mun_atingidos_FioCruz = "/content/drive/MyDrive/WebGis/resize/Municipios_atingidos_FioCruz.shp"

# Carregar shapefiles
gdf_mineracao = gpd.read_file(MineriaIlegal_pt).to_crs(epsg=4326)
gdf_mineracao_pol = gpd.read_file(MineriaIlegal_pol).to_crs(epsg=4326)
gdf_tis = gpd.read_file(tis_poligonaisPolygon).to_crs(epsg=4326)
gdf_amazonia = gpd.read_file(Limites_Amazonia_Legal_2022).to_crs(epsg=4326)
gdf_estados = gpd.read_file(BR_UF_2024).to_crs(epsg=4326)
gdf_mun_FioCruz = gpd.read_file(Mun_atingidos_FioCruz).to_crs(epsg=4326)

"""# Mapa"""

# Cabeçário
print(gdf_estados.columns)

# Importações
import folium
from folium.plugins import MarkerCluster, MousePosition
from folium import FeatureGroup, LayerControl, Element
from shapely.geometry import Point, MultiPoint
from branca.element import Html
from folium.features import DivIcon

# Instalar bibliotecas se necessário
!pip install geopandas folium mapclassify shapely

# Filtrar apenas registros do Brasil (se a coluna "país" existir)
if "país" in gdf_mineracao.columns:
    gdf_mineracao = gdf_mineracao[gdf_mineracao["país"].str.contains("Brasil", na=False, case=False)]

# Filtrar os estados da Amazônia Legal (por UF)
estados_amazonia_legal = ['AC', 'AP', 'AM', 'MT', 'PA', 'RO', 'RR', 'TO', 'MA']
gdf_estados_amazonia = gdf_estados[gdf_estados["SIGLA_UF"].isin(estados_amazonia_legal)]

# Filtrar os municípios afetados na Amazônia Legal
gdf_mun_FioCruz_amazonia = gpd.sjoin(gdf_mun_FioCruz, gdf_amazonia, how="inner", predicate="intersects")
folium.GeoJson(
    gdf_mun_FioCruz_amazonia,
).add_to(mun_fiocruz_layer)

# Realizar junção espacial para manter apenas dados dentro da Amazônia Legal
gdf_mineracao_amazonia = gpd.sjoin(gdf_mineracao, gdf_amazonia, how="inner", predicate="intersects")
gdf_mineracao_pol_amazonia = gpd.sjoin(gdf_mineracao_pol, gdf_amazonia, how="inner", predicate="intersects")
gdf_tis_amazonia = gpd.sjoin(gdf_tis, gdf_amazonia, how="inner", predicate="intersects")

# Separar ouro e outras substâncias (pontos)
gdf_ouro = gdf_mineracao_amazonia[gdf_mineracao_amazonia["substancia"].str.contains("ouro|oro", case=False, na=False)]
gdf_outras = gdf_mineracao_amazonia[~gdf_mineracao_amazonia["substancia"].str.contains("ouro|oro", case=False, na=False)]

# Centro do mapa
centro = gdf_amazonia.geometry.union_all().centroid
centro_latlon = [centro.y, centro.x]

# Criar o mapa base
# Set zoom_control=True to use the default Folium zoom control
m = folium.Map(location=centro_latlon, zoom_start=5, tiles="OpenStreetMap", min_zoom=4, max_bounds=True, zoom_control=True)
m.fit_bounds([[-35, -75], [6, -34]])

# Coordenadas do cursor
MousePosition(
    position="bottomright",
    separator=" | ",
    prefix="Coordenadas:",
    lat_formatter="function(num) {return L.Util.formatNum(num, 5);} ",
    lng_formatter="function(num) {return L.Util.formatNum(num, 5);} "
).add_to(m)

# Grupo: Mineração - Ouro
ouro_layer = FeatureGroup(name="Mineração Ilegal - Ouro")
cluster_ouro = MarkerCluster().add_to(ouro_layer)
for _, row in gdf_ouro.iterrows():
    # Check if the geometry is a Point or MultiPoint
    if isinstance(row.geometry, Point):
        coords = [row.geometry.y, row.geometry.x]
        subst = row["substancia"]
        folium.Marker(
            location=coords,
            popup=f"Substância: {subst}",
            icon=folium.Icon(color='white', icon='hammer', icon_color='#FFD700', prefix='fa')
        ).add_to(cluster_ouro)
    elif isinstance(row.geometry, MultiPoint):
        # If it's a MultiPoint, iterate through its individual points
        for point in row.geometry.geoms:
            coords = [point.y, point.x]
            subst = row["substancia"]
            folium.Marker(
                location=coords,
                popup=f"Substância: {subst}",
                icon=folium.Icon(color='white', icon='hammer', icon_color='#FFD700', prefix='fa')
            ).add_to(cluster_ouro)
ouro_layer.add_to(m)

# Grupo: Mineração - Outras
outras_layer = FeatureGroup(name="Mineração Ilegal - Outras Substâncias")
cluster_outras = MarkerCluster().add_to(outras_layer)
for _, row in gdf_outras.iterrows():
    # verificar a geometria
    if isinstance(row.geometry, Point):
        coords = [row.geometry.y, row.geometry.x]
        subst = row["substancia"]
        folium.Marker(
            location=coords,
            popup=f"Substância: {subst}",
            icon=folium.Icon(color='white', icon='hammer', icon_color='#A0522D', prefix='fa')
        ).add_to(cluster_outras)
    elif isinstance(row.geometry, MultiPoint):
        # Iterar MultiPoint para pontos individuais
        for point in row.geometry.geoms:
            coords = [point.y, point.x]
            subst = row["substancia"]
            folium.Marker(
                location=coords,
                popup=f"Substância: {subst}",
                icon=folium.Icon(color='white', icon='hammer', icon_color='#A0522D', prefix='fa')
            ).add_to(cluster_outras)
outras_layer.add_to(m)


# Grupo: Mineração Ilegal Poligonal
mineracao_pol_layer = FeatureGroup(name="Mineração Ilegal (Poligonal)")
folium.GeoJson(
    gdf_mineracao_pol_amazonia,
    name="Mineração Ilegal (Poligonal)",
    style_function=lambda x: {
        'fillColor': '#FFA500',
        'color': '#FFA500',
        'weight': 1.5,
        'fillOpacity': 0.3
    },
    tooltip=folium.GeoJsonTooltip(fields=["substancia"], aliases=["Substância:"])
).add_to(mineracao_pol_layer)
mineracao_pol_layer.add_to(m)

# Grupo: Terras Indígenas
ti_layer = FeatureGroup(name="Terras Indígenas")
folium.GeoJson(
    gdf_tis_amazonia,
    name="Terras Indígenas",
    style_function=lambda x: {
        'fillColor': '#BE4310',
        'color': '#BE4310',
        'weight': 1,
        'fillOpacity': 0.2
    },
    tooltip=folium.GeoJsonTooltip(fields=["terrai_nom"], aliases=["Terra Indígena:"])
).add_to(ti_layer)
ti_layer.add_to(m)

# Grupo: Amazônia Legal
amazonia_layer = FeatureGroup(name="Amazônia Legal")
folium.GeoJson(
    gdf_amazonia,
    name="Amazônia Legal",
    style_function=lambda x: {
        'fillColor': 'green',
        'color': 'green',
        'weight': 1,
        'fillOpacity': 0.15,
        'dashArray': '5, 5'
    }
).add_to(amazonia_layer)
amazonia_layer.add_to(m)

# Grupo: Estados da Amazônia Legal
estados_layer = FeatureGroup(name="Estados da Amazônia Legal")
folium.GeoJson(
    gdf_estados_amazonia,
    name="Estados da Amazônia Legal",
    style_function=lambda x: {
        'fillColor': 'none',
        'color': '#555',
        'weight': 1
    },
    tooltip=folium.GeoJsonTooltip(fields=["CD_UF"], aliases=["UF:"])
).add_to(estados_layer)
estados_layer.add_to(m)

# Grupo: Municípios Atingidos (Mineração)
mun_fiocruz_layer = FeatureGroup(name="Municípios Afetados (Mineração)")
folium.GeoJson(
    # Dataframe filtrado para Amazônia Legal:
    gdf_mun_FioCruz_amazonia,
    name="Municípios Afetados (Mineração)",
    style_function=lambda x: {
        'fillColor': '#800080',
        'color': '#800080',
        'weight': 1,
        'fillOpacity': 0.3
    },
    tooltip=folium.GeoJsonTooltip(fields=["NM_MUN"], aliases=["Município:"])
).add_to(mun_fiocruz_layer)
mun_fiocruz_layer.add_to(m)


# Adicionar controle de camadas (Colapsível por padrão)
LayerControl(collapsed=False).add_to(m)

# Autor (este será o mais baixo na parte inferior esquerda)
autor_html = '''
<div style="position: fixed; bottom: 10px; left: 10px; z-index:9999;
     font-size:12px; background-color: white; opacity: 0.9; padding: 8px;
     border:1px solid #999;">
<b>Autor:</b> TCC UFABC
</div>
'''
m.get_root().html.add_child(Element(autor_html))

# Fontes colapsíveis
creditos_html = '''
<details style="position: fixed; bottom: 50px; left: 10px; z-index:9999; font-size:12px; background-color: white; opacity: 0.9; padding: 10px; border:1px solid #999;">
  <summary><b>Fontes dos Dados</b></summary>
  <div>
    Garimpo Ilegal (2023)<br>
    <a href="https://www.amazoniasocioambiental.org" target="_blank">RAISG</a><br>
    Terras Indígenas (2024)<br>
    <a href="https://www.gov.br/funai/" target="_blank">FUNAI</a><br>
    Amazônia Legal (2022)<br>
    <a href="https://www.ibge.gov.br" target="_blank">IBGE</a><br>
    Estados (2023)<br>
    <a href="https://www.ibge.gov.br/geociencias/downloads-geociencias.html" target="_blank">IBGE</a><br>
    Municípios afetados (2025)<br>
    <a href="https://mapadeconflitos.ensp.fiocruz.br/" target="_blank">FIOCRUZ</a>
  </div>
</details>
'''
m.get_root().html.add_child(Element(creditos_html))

# Legenda colapsível
legend_html = '''
<details style="position: fixed; top: 10px; left: 10px; z-index:9999; font-size:14px; background-color: white; opacity: 0.9; padding: 10px; border:2px solid grey;">
  <summary><b>Legenda</b></summary>
  <div>
    <i class="fa fa-hammer" style="color:#FFD700"></i>&nbsp;Mineração Ilegal - Ouro<br>
    <i class="fa fa-hammer" style="color:#A0522D"></i>&nbsp;Mineração Ilegal - Outras Substâncias<br>
    <span style="background:#FFA500; width:15px; height:15px; display:inline-block;"></span>&nbsp;Mineração Ilegal (Áreas)<br>
    <span style="background:#BE4310; width:15px; height:15px; display:inline-block;"></span>&nbsp;Terras Indígenas<br>
    <span style="border:2px dashed green; width:15px; height:15px; display:inline-block;"></span>&nbsp;Amazônia Legal<br>
    <span style="background:#555; width:15px; height:15px; display:inline-block;"></span>&nbsp;Estados<br>
    <span style="background:#800080; width:15px; height:15px; display:inline-block;"></span>&nbsp;Municípios Afetados (Mineração)
  </div>
</details>
'''
m.get_root().html.add_child(Element(legend_html))

# 📌 Exibir o mapa
m

# Salvar o mapa como HTML
m.save("mapa_mineracao_ilegal.html")
import os
# Verificar tamanho
file_size = os.path.getsize("mapa_mineracao_ilegal.html") / (1024 * 1024)
print(f"Tamanho do HTML: {file_size:.2f} MB")

from google.colab import files
files.download("mapa_mineracao_ilegal.html")

import zipfile

# Compactar o arquivo HTML
with zipfile.ZipFile("mapa_mineracao_ilegal.zip", "w", zipfile.ZIP_DEFLATED) as zipf:
    zipf.write("mapa_mineracao_ilegal.html")

# Fazer download do arquivo zipado
from google.colab import files
files.download("mapa_mineracao_ilegal.zip")